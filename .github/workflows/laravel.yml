name: Laravel

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# 各ジョブは仮想環境の新しいインスタンスで実行されるので環境変数等は独立
jobs:
  laravel-build:
    runs-on: ubuntu-latest
    # ubuntu上でLaravelコンテナを起動して各ステップを実行(ubuntu等のランナーマシン上で直接jobを実行する方法もある)
    container:
      image: php:8.0-fpm
      volumes:
        - /__w/docker-laravel-phpunit-githubaction/docker-laravel-phpunit-githubaction:/var/www
      
    services:
      # このサービスコンテナ名で通信可能
      db:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: sample_db
        # dbサービスコンテナのTCPのポート: Dockerホストのポート(デフォルト3306をサービスコンテナのポートに指定する場合はports自体なくても可)
        ports: 
          - 3306:3310
        # ヘルスチェックをして問題なければ、stepsに進む
        options: >-
            --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
          
    steps:
      # Githubが公開するアクション actions/checkoutを利用すれば、ソースコードをチェックアウトできる
      - uses: actions/checkout@v2
      
      - name: Print php version
        run: |
          php -v
          
      - name: SetUp linux package
        run: |
             apt update && apt install -y git
             apt install -y zlib1g-dev mariadb-client vim libzip-dev
             docker-php-ext-install zip pdo_mysql
          
      - name: SetUp composer
        run: |
             php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
             php -r "if (hash_file('sha384', 'composer-setup.php') === '756890a4488ce9024fc62c56153228907f1545c228516cbf63f885e036d37e9a59d27d63f46af1d4d07ee0f76181c7d3') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
             php composer-setup.php
             php -r "unlink('composer-setup.php');"
             mv composer.phar /usr/local/bin/composer
           
      - name: SetUp laravel project
        run: |
             composer update
             composer install
             cp ../.env.example .env
             php artisan key:generate
             php artisan migrate
             composer dump-autoload
            # chmod -R 777 storage bootstrap/cache
             
        # working-directoryはrunを実行するディレクトリ(cdしなくて済む)
        working-directory: ./my-app
        
      #- name: Run test
        #run: vendor/bin/phpunit tests
        #working-directory: ./my-app
    
  # FTP-Deploy-Action:
  #   needs: laravel-build
  #   name: FTP-Deploy-Action
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@master
  #     - name: FTP-Deploy-Action
  #       uses: SamKirkland/FTP-Deploy-Action@2.0.0
  #       env:
  #         FTP_SERVER: ${{ secrets.FTP_HOST_NAME }}
  #         FTP_USERNAME: ${{ secrets.FTP_USER_NAME }}
  #         FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
  #         LOCAL_DIR: ./
  #         REMOTE_DIR: /smartphonecaseshop.net/
